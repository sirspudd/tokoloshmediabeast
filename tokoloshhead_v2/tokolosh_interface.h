/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -c TokoloshInterface -p tokolosh_interface.h:tokolosh_interface.cpp ../tokolosh/tokolosh.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TOKOLOSH_INTERFACE_H_1239308594
#define TOKOLOSH_INTERFACE_H_1239308594

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.TokoloshXineBackend.TokoloshMediaPlayer
 */
class TokoloshInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.TokoloshXineBackend.TokoloshMediaPlayer"; }

public:
    TokoloshInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~TokoloshInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> clearLibraryPaths()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("clearLibraryPaths"), argumentList);
    }

    inline QDBusReply<void> dumpFiles()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("dumpFiles"), argumentList);
    }

    inline QDBusReply<void> load(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return callWithArgumentList(QDBus::Block, QLatin1String("load"), argumentList);
    }

    inline QDBusReply<void> next()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("next"), argumentList);
    }

    inline QDBusReply<void> pause()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("pause"), argumentList);
    }

    inline QDBusReply<void> play()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("play"), argumentList);
    }

    inline QDBusReply<void> prev()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("prev"), argumentList);
    }

    inline QDBusReply<bool> repeat()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("repeat"), argumentList);
    }

    inline QDBusReply<void> repopulateLibrary()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("repopulateLibrary"), argumentList);
    }

    inline QDBusReply<void> setVolume(int volume)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(volume);
        return callWithArgumentList(QDBus::Block, QLatin1String("setVolume"), argumentList);
    }

    inline QDBusReply<bool> shuffle()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("shuffle"), argumentList);
    }

    inline QDBusReply<void> stop()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("stop"), argumentList);
    }

    inline QDBusReply<void> syncClients()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("syncClients"), argumentList);
    }

    inline QDBusReply<void> toggleMute()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("toggleMute"), argumentList);
    }

    inline QDBusReply<void> toggleRepeat()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("toggleRepeat"), argumentList);
    }

    inline QDBusReply<void> toggleShuffle()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("toggleShuffle"), argumentList);
    }

    inline QDBusReply<int> volume()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("volume"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void crashed();
    void trackChanged(const QString &path);
};

namespace com {
  namespace TokoloshXineBackend {
    typedef ::TokoloshInterface TokoloshMediaPlayer;
  }
}
#endif
